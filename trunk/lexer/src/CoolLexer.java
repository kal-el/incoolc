/* The following code was generated by JFlex 1.4.1 on 19/05/09 11.55 */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 19/05/09 11.55 from the specification file
 * <tt>/home/radamantis/workspace/InCoolLexer/bin/Incool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\76\7\0\1\75\1\77\1\45\1\0\1\100\1\1\22\0\1\56"+
    "\1\0\1\74\4\0\1\55\1\46\1\47\1\50\1\61\1\71\1\54"+
    "\1\64\1\62\1\102\11\2\1\63\1\65\1\66\1\57\1\60\1\0"+
    "\1\73\1\10\1\51\1\4\1\36\1\20\1\16\1\51\1\24\1\14"+
    "\2\51\1\6\1\51\1\22\1\34\1\40\1\51\1\26\1\12\1\30"+
    "\1\44\1\32\1\42\3\51\1\55\1\101\1\55\1\0\1\52\1\0"+
    "\1\7\1\53\1\3\1\35\1\17\1\15\1\53\1\23\1\13\2\53"+
    "\1\5\1\53\1\21\1\33\1\37\1\53\1\25\1\11\1\27\1\43"+
    "\1\31\1\41\3\53\1\67\1\0\1\70\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\2\1\1\2\1\3\1\4\1\5\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\1\5\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\1\5\1\4"+
    "\1\5\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\2\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\1\3\32\1\33\1\1\1\34\1\35\1\36\1\37"+
    "\2\4\2\5\2\4\2\5\1\4\1\40\1\41\1\5"+
    "\1\40\1\41\1\4\2\42\2\4\2\5\2\4\2\5"+
    "\2\4\1\5\2\43\1\4\1\5\1\4\1\5\1\44"+
    "\1\45\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\2\4\2\5\1\56\1\4\1\56\1\5"+
    "\2\4\2\5\3\4\2\5\1\57\1\60\1\57\1\60"+
    "\2\4\1\5\1\4\1\5\1\4\1\5\1\4\1\61"+
    "\1\5\1\61\2\62\2\4\2\5\1\4\1\63\1\64"+
    "\1\63\1\64\1\65\1\66\1\65\2\67\1\4\1\5"+
    "\2\70\2\4\2\5\1\71\2\72\1\73\1\4\1\73"+
    "\1\5\1\4\1\5\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\311\0\u0711\0\311\0\u0754"+
    "\0\u0797\0\311\0\u07da\0\u081d\0\311\0\311\0\311\0\311"+
    "\0\311\0\u0860\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\u08a3\0\311\0\u08e6\0\u0929\0\311\0\u07da\0\311"+
    "\0\311\0\311\0\311\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u025b\0\u0bc7\0\u0c0a\0\u029e"+
    "\0\u0c4d\0\u0c90\0\u025b\0\u029e\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u025b"+
    "\0\u029e\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\311\0\311\0\u10c0"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u025b\0\u120f\0\u029e\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u025b\0\u025b\0\u029e\0\u029e\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u025b\0\u1708\0\u029e"+
    "\0\u025b\0\u029e\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u025b"+
    "\0\u025b\0\u029e\0\u029e\0\u025b\0\u025b\0\u029e\0\u025b\0\u029e"+
    "\0\u189a\0\u18dd\0\u025b\0\u029e\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u025b\0\u025b\0\u029e\0\u025b\0\u1a2c\0\u029e\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u025b\0\u029e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\13\1\14\1\13\1\14\1\25"+
    "\1\26\1\13\1\14\1\27\1\30\1\13\1\14\1\31"+
    "\1\32\1\33\1\34\1\13\1\14\1\35\1\36\1\37"+
    "\1\40\1\14\1\4\1\13\1\41\1\42\1\43\1\44"+
    "\1\42\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\3\5\1\62"+
    "\1\6\45\63\1\35\1\64\1\63\1\65\32\63\45\4"+
    "\1\66\10\4\1\67\15\4\1\70\1\61\1\71\1\72"+
    "\1\73\1\62\1\4\105\0\1\6\77\0\1\6\2\0"+
    "\3\13\2\74\2\75\34\13\4\0\3\13\26\0\1\13"+
    "\2\0\3\14\2\76\2\77\34\14\4\0\3\14\26\0"+
    "\1\14\2\0\15\13\2\100\12\13\2\101\10\13\4\0"+
    "\3\13\26\0\1\13\2\0\15\14\2\102\12\14\2\103"+
    "\10\14\4\0\3\14\26\0\1\14\2\0\43\13\4\0"+
    "\3\13\26\0\1\13\2\0\43\14\4\0\3\14\26\0"+
    "\1\14\2\0\7\13\2\104\2\13\2\105\2\13\2\106"+
    "\22\13\4\0\3\13\26\0\1\13\2\0\7\14\2\107"+
    "\2\14\2\110\2\14\2\111\22\14\4\0\3\14\26\0"+
    "\1\14\2\0\5\13\2\112\2\13\2\113\30\13\4\0"+
    "\3\13\26\0\1\13\2\0\11\14\2\114\30\14\4\0"+
    "\3\14\26\0\1\14\2\0\3\13\2\115\2\13\2\116"+
    "\32\13\4\0\3\13\26\0\1\13\2\0\3\14\2\117"+
    "\2\14\2\120\32\14\4\0\3\14\26\0\1\14\2\0"+
    "\15\13\2\121\12\13\2\122\10\13\4\0\3\13\26\0"+
    "\1\13\2\0\15\14\2\123\12\14\2\124\10\14\4\0"+
    "\3\14\26\0\1\14\2\0\21\13\2\125\2\126\16\13"+
    "\4\0\3\13\26\0\1\13\2\0\21\14\2\127\20\14"+
    "\4\0\3\14\26\0\1\14\2\0\13\13\2\130\26\13"+
    "\4\0\3\13\26\0\1\13\2\0\13\14\2\131\26\14"+
    "\4\0\3\14\26\0\1\14\2\0\31\13\2\132\10\13"+
    "\4\0\3\13\26\0\1\13\2\0\31\14\2\133\10\14"+
    "\4\0\3\14\26\0\1\14\2\0\21\13\2\134\20\13"+
    "\4\0\3\13\26\0\1\13\2\0\21\14\2\135\20\14"+
    "\4\0\3\14\26\0\1\14\50\0\1\136\101\0\1\137"+
    "\107\0\1\140\104\0\1\67\104\0\1\141\76\0\1\142"+
    "\2\0\1\143\70\0\1\144\33\0\1\145\1\146\50\0"+
    "\1\147\101\0\1\150\35\0\5\13\2\151\34\13\4\0"+
    "\3\13\26\0\1\13\2\0\7\13\2\152\32\13\4\0"+
    "\3\13\26\0\1\13\2\0\5\14\2\153\34\14\4\0"+
    "\3\14\26\0\1\14\2\0\7\14\2\154\32\14\4\0"+
    "\3\14\26\0\1\14\2\0\25\13\2\155\14\13\4\0"+
    "\3\13\26\0\1\13\2\0\31\13\2\156\10\13\4\0"+
    "\3\13\26\0\1\13\2\0\25\14\2\157\14\14\4\0"+
    "\3\14\26\0\1\14\2\0\31\14\2\160\10\14\4\0"+
    "\3\14\26\0\1\14\2\0\27\13\2\161\12\13\4\0"+
    "\3\13\26\0\1\13\2\0\21\13\2\162\20\13\4\0"+
    "\3\13\26\0\1\13\2\0\27\14\2\163\12\14\4\0"+
    "\3\14\26\0\1\14\2\0\21\14\2\164\20\14\4\0"+
    "\3\14\26\0\1\14\2\0\3\13\2\165\36\13\4\0"+
    "\3\13\26\0\1\13\2\0\7\13\2\166\32\13\4\0"+
    "\3\13\26\0\1\13\2\0\5\13\2\167\34\13\4\0"+
    "\3\13\26\0\1\13\2\0\7\14\2\170\32\14\4\0"+
    "\3\14\26\0\1\14\2\0\5\14\2\171\34\14\4\0"+
    "\3\14\26\0\1\14\2\0\37\13\2\172\2\13\4\0"+
    "\3\13\26\0\1\13\2\0\25\13\2\173\14\13\4\0"+
    "\3\13\26\0\1\13\2\0\37\14\2\174\2\14\4\0"+
    "\3\14\26\0\1\14\2\0\25\14\2\175\14\14\4\0"+
    "\3\14\26\0\1\14\2\0\15\13\2\176\24\13\4\0"+
    "\3\13\26\0\1\13\2\0\41\13\2\177\4\0\3\13"+
    "\26\0\1\13\2\0\15\14\2\200\24\14\4\0\3\14"+
    "\26\0\1\14\2\0\31\13\2\201\10\13\4\0\3\13"+
    "\26\0\1\13\2\0\31\14\2\202\10\14\4\0\3\14"+
    "\26\0\1\14\2\0\11\13\2\203\30\13\4\0\3\13"+
    "\26\0\1\13\2\0\11\14\2\204\30\14\4\0\3\14"+
    "\26\0\1\14\45\140\1\35\35\140\2\0\7\13\2\205"+
    "\32\13\4\0\3\13\26\0\1\13\2\0\15\13\2\206"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\7\14\2\207"+
    "\32\14\4\0\3\14\26\0\1\14\2\0\15\14\2\210"+
    "\24\14\4\0\3\14\26\0\1\14\2\0\35\13\2\211"+
    "\4\13\4\0\3\13\26\0\1\13\2\0\35\14\2\212"+
    "\4\14\4\0\3\14\26\0\1\14\2\0\31\13\2\213"+
    "\10\13\4\0\3\13\26\0\1\13\2\0\15\13\2\214"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\31\14\2\215"+
    "\10\14\4\0\3\14\26\0\1\14\2\0\15\14\2\216"+
    "\24\14\4\0\3\14\26\0\1\14\2\0\7\13\2\217"+
    "\32\13\4\0\3\13\26\0\1\13\2\0\15\13\2\220"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\1\13\2\221"+
    "\40\13\4\0\3\13\26\0\1\13\2\0\15\14\2\222"+
    "\24\14\4\0\3\14\26\0\1\14\2\0\1\14\2\223"+
    "\40\14\4\0\3\14\26\0\1\14\2\0\17\13\2\224"+
    "\22\13\4\0\3\13\26\0\1\13\2\0\15\13\2\225"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\17\14\2\226"+
    "\22\14\4\0\3\14\26\0\1\14\2\0\3\13\2\227"+
    "\36\13\4\0\3\13\26\0\1\13\2\0\3\14\2\230"+
    "\36\14\4\0\3\14\26\0\1\14\2\0\3\13\2\231"+
    "\36\13\4\0\3\13\26\0\1\13\2\0\3\14\2\232"+
    "\36\14\4\0\3\14\26\0\1\14\2\0\7\13\2\233"+
    "\32\13\4\0\3\13\26\0\1\13\2\0\7\14\2\234"+
    "\32\14\4\0\3\14\26\0\1\14\2\0\11\13\2\235"+
    "\30\13\4\0\3\13\26\0\1\13\2\0\23\13\2\236"+
    "\16\13\4\0\3\13\26\0\1\13\2\0\11\14\2\237"+
    "\30\14\4\0\3\14\26\0\1\14\2\0\23\14\2\240"+
    "\16\14\4\0\3\14\26\0\1\14\2\0\15\13\2\241"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\15\13\2\242"+
    "\24\13\4\0\3\13\26\0\1\13\2\0\15\14\2\243"+
    "\24\14\4\0\3\14\26\0\1\14\2\0\33\13\2\244"+
    "\6\13\4\0\3\13\26\0\1\13\2\0\11\13\2\245"+
    "\30\13\4\0\3\13\26\0\1\13\2\0\33\14\2\246"+
    "\6\14\4\0\3\14\26\0\1\14\2\0\11\14\2\247"+
    "\30\14\4\0\3\14\26\0\1\14\2\0\25\13\2\250"+
    "\14\13\4\0\3\13\26\0\1\13\2\0\25\14\2\251"+
    "\14\14\4\0\3\14\26\0\1\14\2\0\7\13\2\252"+
    "\32\13\4\0\3\13\26\0\1\13\2\0\7\14\2\253"+
    "\32\14\4\0\3\14\26\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\2\11\27\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\5\11\1\1\7\11\1\1\1\11"+
    "\2\1\1\11\1\1\4\11\42\1\2\11\1\0\10\11"+
    "\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */
	// Max size of string constants
    static int MAX_STR_CONST = 1025;
	int yy_lexical_state;
	int balanced_comment=0;
    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
		return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
		filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
		return filename;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
  /*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return new Symbol(TokenConstants.LBRACE);
          }
        case 61: break;
        case 3: 
          { return new Symbol(TokenConstants.INT_CONST,AbstractTable.inttable.addInt(Integer.parseInt(yytext())));
          }
        case 62: break;
        case 39: 
          { return new Symbol(TokenConstants.ASSIGN);
          }
        case 63: break;
        case 27: 
          { curr_lineno++;yybegin(YYINITIAL);yy_lexical_state=0;return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("Unterminated String constant"));
          }
        case 64: break;
        case 22: 
          { return new Symbol(TokenConstants.NEG);
          }
        case 65: break;
        case 32: 
          { return new Symbol(TokenConstants.IF);
          }
        case 66: break;
        case 46: 
          { return new Symbol(TokenConstants.LET);
          }
        case 67: break;
        case 33: 
          { return new Symbol(TokenConstants.IN);
          }
        case 68: break;
        case 12: 
          { return new Symbol(TokenConstants.EQ);
          }
        case 69: break;
        case 23: 
          { return new Symbol(TokenConstants.AT);
          }
        case 70: break;
        case 47: 
          { return new Symbol(TokenConstants.NEW);
          }
        case 71: break;
        case 37: 
          { return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("Unmatched *)"));
          }
        case 72: break;
        case 30: 
          { string_buf.append("\t");
          }
        case 73: break;
        case 29: 
          { return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("String contain null characters"));
          }
        case 74: break;
        case 45: 
          { balanced_comment--;if(balanced_comment==0){yybegin(YYINITIAL);yy_lexical_state=0;}
          }
        case 75: break;
        case 50: 
          { return new Symbol(TokenConstants.LOOP);
          }
        case 76: break;
        case 15: 
          { return new Symbol(TokenConstants.COLON);
          }
        case 77: break;
        case 13: 
          { return new Symbol(TokenConstants.PLUS);
          }
        case 78: break;
        case 36: 
          { yybegin(COMMENT);balanced_comment++;yy_lexical_state=1;
          }
        case 79: break;
        case 52: 
          { return new Symbol(TokenConstants.ESAC);
          }
        case 80: break;
        case 7: 
          { return new Symbol(TokenConstants.LPAREN);
          }
        case 81: break;
        case 58: 
          { return new Symbol(TokenConstants.WHILE);
          }
        case 82: break;
        case 42: 
          { string_buf.append('\\');
          }
        case 83: break;
        case 49: 
          { return new Symbol(TokenConstants.CASE);
          }
        case 84: break;
        case 24: 
          { string_buf.setLength(0); yybegin(STRING);yy_lexical_state=2;
          }
        case 85: break;
        case 60: 
          { return new Symbol(TokenConstants.INHERITS);
          }
        case 86: break;
        case 51: 
          { return new Symbol(TokenConstants.ELSE);
          }
        case 87: break;
        case 20: 
          { return new Symbol(TokenConstants.RBRACE);
          }
        case 88: break;
        case 16: 
          { return new Symbol(TokenConstants.DOT);
          }
        case 89: break;
        case 53: 
          { return new Symbol(TokenConstants.THEN);
          }
        case 90: break;
        case 40: 
          { return new Symbol(TokenConstants.LE);
          }
        case 91: break;
        case 9: 
          { return new Symbol(TokenConstants.MULT);
          }
        case 92: break;
        case 31: 
          { string_buf.append("\f");
          }
        case 93: break;
        case 11: 
          { return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString(yytext()));
          }
        case 94: break;
        case 6: 
          { curr_lineno++;
          }
        case 95: break;
        case 34: 
          { return new Symbol(TokenConstants.FI);
          }
        case 96: break;
        case 38: 
          { /* Sample lexical rule for "=>" arrow.
                                     Further lexical rules should be defined
                                     here, after the last %% separator */
                                  return new Symbol(TokenConstants.DARROW);
          }
        case 97: break;
        case 5: 
          { return new Symbol(TokenConstants.TYPEID,AbstractTable.idtable.addString(yytext()));
          }
        case 98: break;
        case 10: 
          { return new Symbol(TokenConstants.MINUS);
          }
        case 99: break;
        case 59: 
          { return new Symbol(TokenConstants.ISVOID);
          }
        case 100: break;
        case 35: 
          { return new Symbol(TokenConstants.OF);
          }
        case 101: break;
        case 44: 
          { balanced_comment++;
          }
        case 102: break;
        case 17: 
          { return new Symbol(TokenConstants.SEMI);
          }
        case 103: break;
        case 28: 
          { yybegin(YYINITIAL);yy_lexical_state=0;
			 if(string_buf.toString().length() > MAX_STR_CONST)
			 	return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("String constant too long"));
			  else return new Symbol(TokenConstants.STR_CONST,AbstractTable.stringtable.addString(string_buf.toString()));
          }
        case 104: break;
        case 48: 
          { return new Symbol(TokenConstants.NOT);
          }
        case 105: break;
        case 43: 
          { string_buf.append("0");
          }
        case 106: break;
        case 41: 
          { string_buf.append('\n');curr_lineno++;
          }
        case 107: break;
        case 21: 
          { return new Symbol(TokenConstants.COMMA);
          }
        case 108: break;
        case 14: 
          { return new Symbol(TokenConstants.DIV);
          }
        case 109: break;
        case 4: 
          { return new Symbol(TokenConstants.OBJECTID, AbstractTable.idtable.addString(yytext()));
          }
        case 110: break;
        case 18: 
          { return new Symbol(TokenConstants.LT);
          }
        case 111: break;
        case 54: 
          { return new Symbol(TokenConstants.BOOL_CONST,AbstractTable.stringtable.addString("true"));
          }
        case 112: break;
        case 26: 
          { /* ignore comment content */
          }
        case 113: break;
        case 56: 
          { return new Symbol(TokenConstants.CLASS);
          }
        case 114: break;
        case 55: 
          { return new Symbol(TokenConstants.POOL);
          }
        case 115: break;
        case 8: 
          { return new Symbol(TokenConstants.RPAREN);
          }
        case 116: break;
        case 25: 
          { string_buf.append("\b");
          }
        case 117: break;
        case 57: 
          { return new Symbol(TokenConstants.BOOL_CONST,AbstractTable.stringtable.addString("false"));
          }
        case 118: break;
        case 1: 
          { string_buf.append(yytext());
          }
        case 119: break;
        case 2: 
          { 
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 
/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */
	
	switch(yy_lexical_state) {
    case YYINITIAL:
    	break;
	case COMMENT:
		yybegin(YYINITIAL);
		yy_lexical_state=0;
		return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("EOF in comment"));
	case STRING:
		yybegin(YYINITIAL);
		yy_lexical_state=0;
		return new Symbol(TokenConstants.ERROR,AbstractTable.stringtable.addString("EOF in String constant"));
	}
	 return new Symbol(TokenConstants.EOF);   
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
