
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060102
// Sat May 23 15:26:43 CEST 2009
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060102 generated parser.
  * @version Sat May 23 15:26:43 CEST 2009
  */
public class CoolCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolCup() {super();}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\010\000\002\004\012\000\002\005\002\000" +
    "\002\005\004\000\002\005\004\000\002\006\014\000\002" +
    "\006\010\000\002\006\006\000\002\006\014\000\002\016" +
    "\002\000\002\016\003\000\002\017\003\000\002\017\005" +
    "\000\002\020\005\000\002\021\003\000\002\021\004\000" +
    "\002\022\010\000\002\007\002\000\002\007\003\000\002" +
    "\010\004\000\002\010\005\000\002\011\004\000\002\011" +
    "\005\000\002\012\003\000\002\012\005\000\002\013\005" +
    "\000\002\013\007\000\002\013\010\000\002\013\006\000" +
    "\002\013\004\000\002\013\011\000\002\013\007\000\002" +
    "\013\005\000\002\013\007\000\002\013\004\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\004\000\002" +
    "\013\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\014\010" +
    "\000\002\014\010\000\002\015\002\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\003\006\004\007\001\002\000\010\002" +
    "\001\003\222\004\007\001\002\000\004\002\221\001\002" +
    "\000\004\043\220\001\002\000\004\055\011\001\002\000" +
    "\010\002\uffff\003\uffff\004\uffff\001\002\000\006\011\013" +
    "\050\012\001\002\000\010\003\ufff9\051\ufff9\056\ufff9\001" +
    "\002\000\004\055\014\001\002\000\004\050\015\001\002" +
    "\000\010\003\ufff9\051\ufff9\056\ufff9\001\002\000\010\003" +
    "\017\051\022\056\021\001\002\000\010\003\ufff7\051\ufff7" +
    "\056\ufff7\001\002\000\010\003\ufff8\051\ufff8\056\ufff8\001" +
    "\002\000\006\044\024\045\025\001\002\000\004\043\023" +
    "\001\002\000\010\002\ufffa\003\ufffa\004\ufffa\001\002\000" +
    "\004\055\210\001\002\000\006\046\ufff2\056\027\001\002" +
    "\000\006\042\ufff0\046\ufff0\001\002\000\004\044\206\001" +
    "\002\000\004\046\034\001\002\000\006\042\032\046\ufff1" +
    "\001\002\000\004\056\027\001\002\000\006\042\uffef\046" +
    "\uffef\001\002\000\004\044\035\001\002\000\004\055\036" +
    "\001\002\000\004\050\037\001\002\000\040\003\050\007" +
    "\046\012\055\017\040\020\052\024\043\025\047\027\054" +
    "\041\056\045\057\050\041\052\044\053\042\054\045\056" +
    "\051\001\002\000\036\007\046\012\055\017\040\020\052" +
    "\024\043\025\047\027\054\041\056\045\057\050\041\052" +
    "\044\053\042\054\045\056\051\001\002\000\040\007\046" +
    "\012\055\017\040\020\052\024\043\025\047\027\054\041" +
    "\056\045\057\050\041\051\uffea\052\044\053\042\054\045" +
    "\056\051\001\002\000\052\005\uffcc\006\uffcc\010\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\022\uffcc\030\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\046\uffcc\047\uffcc\051\uffcc\001\002\000\004\055\172" +
    "\001\002\000\052\005\uffcb\006\uffcb\010\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\022\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\046" +
    "\uffcb\047\uffcb\051\uffcb\001\002\000\052\005\uffca\006\uffca" +
    "\010\uffca\014\uffca\015\uffca\016\uffca\022\uffca\030\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\042\uffca\043\uffca\046\uffca\047\uffca\051\uffca\001\002\000" +
    "\036\007\046\012\055\017\040\020\052\024\043\025\047" +
    "\027\054\041\056\045\057\050\041\052\044\053\042\054" +
    "\045\056\051\001\002\000\036\007\046\012\055\017\040" +
    "\020\052\024\043\025\047\027\054\041\056\045\057\050" +
    "\041\052\044\053\042\054\045\056\051\001\002\000\004" +
    "\051\161\001\002\000\060\005\uffcd\006\uffcd\010\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\022\uffcd\026\154\030\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042" +
    "\uffcd\043\uffcd\044\152\045\100\046\uffcd\047\uffcd\051\uffcd" +
    "\001\002\000\036\007\046\012\055\017\040\020\052\024" +
    "\043\025\047\027\054\041\056\045\057\050\041\052\044" +
    "\053\042\054\045\056\051\001\002\000\026\030\065\032" +
    "\064\033\067\034\061\035\062\036\063\037\072\040\066" +
    "\047\071\051\134\001\002\000\036\007\046\012\055\017" +
    "\040\020\052\024\043\025\047\027\054\041\056\045\057" +
    "\050\041\052\044\053\042\054\045\056\051\001\002\000" +
    "\004\056\121\001\002\000\036\007\046\012\055\017\040" +
    "\020\052\024\043\025\047\027\054\041\056\045\057\050" +
    "\041\052\044\053\042\054\045\056\051\001\002\000\036" +
    "\007\046\012\055\017\040\020\052\024\043\025\047\027" +
    "\054\041\056\045\057\050\041\052\044\053\042\054\045" +
    "\056\051\001\002\000\026\030\065\032\064\033\067\034" +
    "\061\035\062\036\063\037\072\040\066\046\070\047\071" +
    "\001\002\000\036\007\046\012\055\017\040\020\052\024" +
    "\043\025\047\027\054\041\056\045\057\050\041\052\044" +
    "\053\042\054\045\056\051\001\002\000\036\007\046\012" +
    "\055\017\040\020\052\024\043\025\047\027\054\041\056" +
    "\045\057\050\041\052\044\053\042\054\045\056\051\001" +
    "\002\000\036\007\046\012\055\017\040\020\052\024\043" +
    "\025\047\027\054\041\056\045\057\050\041\052\044\053" +
    "\042\054\045\056\051\001\002\000\036\007\046\012\055" +
    "\017\040\020\052\024\043\025\047\027\054\041\056\045" +
    "\057\050\041\052\044\053\042\054\045\056\051\001\002" +
    "\000\036\007\046\012\055\017\040\020\052\024\043\025" +
    "\047\027\054\041\056\045\057\050\041\052\044\053\042" +
    "\054\045\056\051\001\002\000\004\056\110\001\002\000" +
    "\036\007\046\012\055\017\040\020\052\024\043\025\047" +
    "\027\054\041\056\045\057\050\041\052\044\053\042\054" +
    "\045\056\051\001\002\000\052\005\uffce\006\uffce\010\uffce" +
    "\014\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\043\uffce\046\uffce\047\uffce\051\uffce\001\002\000\004\055" +
    "\074\001\002\000\036\007\046\012\055\017\040\020\052" +
    "\024\043\025\047\027\054\041\056\045\057\050\041\052" +
    "\044\053\042\054\045\056\051\001\002\000\044\005\uffd2" +
    "\006\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\032" +
    "\064\033\067\034\061\035\062\040\066\042\uffd2\043\uffd2" +
    "\046\uffd2\047\071\051\uffd2\001\002\000\004\040\075\001" +
    "\002\000\004\056\076\001\002\000\004\045\100\001\002" +
    "\000\052\005\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\046\uffe0\047" +
    "\uffe0\051\uffe0\001\002\000\040\007\046\012\055\017\040" +
    "\020\052\024\043\025\047\027\054\041\056\045\057\046" +
    "\102\050\041\052\044\053\042\054\045\056\051\001\002" +
    "\000\006\042\104\046\105\001\002\000\052\005\uffe6\006" +
    "\uffe6\010\uffe6\014\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\042\uffe6\043\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002" +
    "\000\030\030\065\032\064\033\067\034\061\035\062\036" +
    "\063\037\072\040\066\042\uffe4\046\uffe4\047\071\001\002" +
    "\000\036\007\046\012\055\017\040\020\052\024\043\025" +
    "\047\027\054\041\056\045\057\050\041\052\044\053\042" +
    "\054\045\056\051\001\002\000\052\005\uffe5\006\uffe5\010" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\046\uffe5\047\uffe5\051\uffe5\001\002\000\030" +
    "\030\065\032\064\033\067\034\061\035\062\036\063\037" +
    "\072\040\066\042\uffe3\046\uffe3\047\071\001\002\000\052" +
    "\005\uffd4\006\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4\022" +
    "\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\066\042\uffd4\043\uffd4\046\uffd4\047\071\051" +
    "\uffd4\001\002\000\004\045\100\001\002\000\052\005\uffdf" +
    "\006\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf\022\uffdf\030" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf\051\uffdf\001" +
    "\002\000\044\005\uffd1\006\uffd1\010\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\022\uffd1\032\064\033\067\034\061\035\062\040" +
    "\066\042\uffd1\043\uffd1\046\uffd1\047\071\051\uffd1\001\002" +
    "\000\052\005\uffd7\006\uffd7\010\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\022\uffd7\030\uffd7\032\uffd7\033\067\034\uffd7\035\062" +
    "\036\uffd7\037\uffd7\040\066\042\uffd7\043\uffd7\046\uffd7\047" +
    "\071\051\uffd7\001\002\000\044\005\uffd0\006\uffd0\010\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\022\uffd0\032\064\033\067\034" +
    "\061\035\062\040\066\042\uffd0\043\uffd0\046\uffd0\047\071" +
    "\051\uffd0\001\002\000\052\005\uffd5\006\uffd5\010\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\022\uffd5\030\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\066\042\uffd5\043" +
    "\uffd5\046\uffd5\047\071\051\uffd5\001\002\000\052\005\uffd6" +
    "\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6\030" +
    "\uffd6\032\uffd6\033\067\034\uffd6\035\062\036\uffd6\037\uffd6" +
    "\040\066\042\uffd6\043\uffd6\046\uffd6\047\071\051\uffd6\001" +
    "\002\000\052\005\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\022\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\066\042\uffd3\043\uffd3\046\uffd3" +
    "\047\071\051\uffd3\001\002\000\052\005\uffc9\006\uffc9\010" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\022\uffc9\030\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042" +
    "\uffc9\043\uffc9\046\uffc9\047\uffc9\051\uffc9\001\002\000\004" +
    "\044\122\001\002\000\004\055\123\001\002\000\010\010" +
    "\uffc6\026\125\042\uffc6\001\002\000\006\010\130\042\127" +
    "\001\002\000\036\007\046\012\055\017\040\020\052\024" +
    "\043\025\047\027\054\041\056\045\057\050\041\052\044" +
    "\053\042\054\045\056\051\001\002\000\030\010\uffc5\030" +
    "\065\032\064\033\067\034\061\035\062\036\063\037\072" +
    "\040\066\042\uffc5\047\071\001\002\000\004\056\121\001" +
    "\002\000\036\007\046\012\055\017\040\020\052\024\043" +
    "\025\047\027\054\041\056\045\057\050\041\052\044\053" +
    "\042\054\045\056\051\001\002\000\052\005\uffc8\006\uffc8" +
    "\010\uffc8\014\uffc8\015\uffc8\016\uffc8\022\uffc8\030\065\032" +
    "\064\033\067\034\061\035\062\036\063\037\072\040\066" +
    "\042\uffc8\043\uffc8\046\uffc8\047\071\051\uffc8\001\002\000" +
    "\052\005\uffc7\006\uffc7\010\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\022\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\046\uffc7\047\uffc7" +
    "\051\uffc7\001\002\000\052\005\uffcf\006\uffcf\010\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\022\uffcf\030\065\032\064\033\067" +
    "\034\061\035\062\036\063\037\072\040\066\042\uffcf\043" +
    "\uffcf\046\uffcf\047\071\051\uffcf\001\002\000\004\043\135" +
    "\001\002\000\010\003\ufff6\051\ufff6\056\ufff6\001\002\000" +
    "\026\022\137\030\065\032\064\033\067\034\061\035\062" +
    "\036\063\037\072\040\066\047\071\001\002\000\004\056" +
    "\141\001\002\000\006\021\uffed\056\uffed\001\002\000\004" +
    "\044\145\001\002\000\006\021\144\056\141\001\002\000" +
    "\006\021\uffec\056\uffec\001\002\000\052\005\uffda\006\uffda" +
    "\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda\030\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\042\uffda\043\uffda\046\uffda\047\uffda\051\uffda\001\002\000" +
    "\004\055\146\001\002\000\004\023\147\001\002\000\036" +
    "\007\046\012\055\017\040\020\052\024\043\025\047\027" +
    "\054\041\056\045\057\050\041\052\044\053\042\054\045" +
    "\056\051\001\002\000\026\030\065\032\064\033\067\034" +
    "\061\035\062\036\063\037\072\040\066\043\151\047\071" +
    "\001\002\000\006\021\uffeb\056\uffeb\001\002\000\004\055" +
    "\156\001\002\000\052\005\uffde\006\uffde\010\uffde\014\uffde" +
    "\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde" +
    "\046\uffde\047\uffde\051\uffde\001\002\000\036\007\046\012" +
    "\055\017\040\020\052\024\043\025\047\027\054\041\056" +
    "\045\057\050\041\052\044\053\042\054\045\056\051\001" +
    "\002\000\052\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\022\uffe2\030\065\032\064\033\067\034\061\035" +
    "\062\036\063\037\072\040\066\042\uffe2\043\uffe2\046\uffe2" +
    "\047\071\051\uffe2\001\002\000\004\026\157\001\002\000" +
    "\036\007\046\012\055\017\040\020\052\024\043\025\047" +
    "\027\054\041\056\045\057\050\041\052\044\053\042\054" +
    "\045\056\051\001\002\000\052\005\uffe1\006\uffe1\010\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\022\uffe1\030\065\032\064\033" +
    "\067\034\061\035\062\036\063\037\072\040\066\042\uffe1" +
    "\043\uffe1\046\uffe1\047\071\051\uffe1\001\002\000\004\043" +
    "\162\001\002\000\010\003\ufff3\051\ufff3\056\ufff3\001\002" +
    "\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\066\042\uffd8\043\uffd8\046\uffd8\047" +
    "\071\051\uffd8\001\002\000\026\016\165\030\065\032\064" +
    "\033\067\034\061\035\062\036\063\037\072\040\066\047" +
    "\071\001\002\000\036\007\046\012\055\017\040\020\052" +
    "\024\043\025\047\027\054\041\056\045\057\050\041\052" +
    "\044\053\042\054\045\056\051\001\002\000\026\005\167" +
    "\030\065\032\064\033\067\034\061\035\062\036\063\037" +
    "\072\040\066\047\071\001\002\000\036\007\046\012\055" +
    "\017\040\020\052\024\043\025\047\027\054\041\056\045" +
    "\057\050\041\052\044\053\042\054\045\056\051\001\002" +
    "\000\026\006\171\030\065\032\064\033\067\034\061\035" +
    "\062\036\063\037\072\040\066\047\071\001\002\000\052" +
    "\005\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd\051" +
    "\uffdd\001\002\000\052\005\uffd9\006\uffd9\010\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\022\uffd9\030\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\001\002\000\040\007\046\012" +
    "\055\017\040\020\052\024\043\025\047\027\054\041\056" +
    "\045\057\050\041\051\uffe9\052\044\053\042\054\045\056" +
    "\051\001\002\000\004\051\177\001\002\000\026\030\065" +
    "\032\064\033\067\034\061\035\062\036\063\037\072\040" +
    "\066\043\176\047\071\001\002\000\040\007\uffe8\012\uffe8" +
    "\017\uffe8\020\uffe8\024\uffe8\025\uffe8\027\uffe8\041\uffe8\045" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8" +
    "\001\002\000\052\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\022\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\046" +
    "\uffdb\047\uffdb\051\uffdb\001\002\000\026\030\065\032\064" +
    "\033\067\034\061\035\062\036\063\037\072\040\066\043" +
    "\201\047\071\001\002\000\040\007\uffe7\012\uffe7\017\uffe7" +
    "\020\uffe7\024\uffe7\025\uffe7\027\uffe7\041\uffe7\045\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\056\uffe7\001\002" +
    "\000\026\014\203\030\065\032\064\033\067\034\061\035" +
    "\062\036\063\037\072\040\066\047\071\001\002\000\036" +
    "\007\046\012\055\017\040\020\052\024\043\025\047\027" +
    "\054\041\056\045\057\050\041\052\044\053\042\054\045" +
    "\056\051\001\002\000\026\015\205\030\065\032\064\033" +
    "\067\034\061\035\062\036\063\037\072\040\066\047\071" +
    "\001\002\000\052\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\022\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\046" +
    "\uffdc\047\uffdc\051\uffdc\001\002\000\004\055\207\001\002" +
    "\000\006\042\uffee\046\uffee\001\002\000\006\026\212\043" +
    "\211\001\002\000\010\003\ufff4\051\ufff4\056\ufff4\001\002" +
    "\000\036\007\046\012\055\017\040\020\052\024\043\025" +
    "\047\027\054\041\056\045\057\050\041\052\044\053\042" +
    "\054\045\056\051\001\002\000\026\030\065\032\064\033" +
    "\067\034\061\035\062\036\063\037\072\040\066\043\214" +
    "\047\071\001\002\000\010\003\ufff5\051\ufff5\056\ufff5\001" +
    "\002\000\010\003\017\051\216\056\021\001\002\000\004" +
    "\043\217\001\002\000\010\002\ufffb\003\ufffb\004\ufffb\001" +
    "\002\000\010\002\ufffc\003\ufffc\004\ufffc\001\002\000\004" +
    "\002\000\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001" +
    "\002\000\010\002\ufffe\003\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\002\004\003\003\004\007\001\001\000" +
    "\004\004\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\027\017\030\020\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\052\001\001\000" +
    "\004\013\201\001\001\000\010\007\173\010\172\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\163\001\001\000\004" +
    "\013\162\001\001\000\002\001\001\000\004\011\152\001" +
    "\001\000\004\013\135\001\001\000\002\001\001\000\004" +
    "\013\132\001\001\000\004\014\117\001\001\000\004\013" +
    "\116\001\001\000\004\013\057\001\001\000\002\001\001" +
    "\000\004\013\115\001\001\000\004\013\114\001\001\000" +
    "\004\013\113\001\001\000\004\013\112\001\001\000\004" +
    "\013\111\001\001\000\002\001\001\000\004\013\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\076\001\001\000\002\001\001\000\006" +
    "\012\100\013\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\123\001\001\000\002\001" +
    "\001\000\004\013\125\001\001\000\002\001\001\000\004" +
    "\014\131\001\001\000\004\013\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\141\022" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\165\001\001\000\002\001" +
    "\001\000\004\013\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolCup$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolCup parser;

  /** Constructor */
  CUP$CoolCup$actions(CoolCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolCup$do_action(
    int                        CUP$CoolCup$act_num,
    java_cup.runtime.lr_parser CUP$CoolCup$parser,
    java.util.Stack            CUP$CoolCup$stack,
    int                        CUP$CoolCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolCup$result;

      /* select the action based on the action number */
      switch (CUP$CoolCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // let_args ::= ASSIGN expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = e; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(11/*let_args*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // let_args ::= 
            {
              Expression RESULT = null;
		 RESULT = new no_expr(curr_lineno()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(11/*let_args*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // let_expr ::= OBJECTID COLON TYPEID let_args COMMA let_expr 
            {
              let RESULT = null;
		int objleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol tipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression args = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let le = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), obj, tipo, args, le); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(10/*let_expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // let_expr ::= OBJECTID COLON TYPEID let_args IN expr 
            {
              let RESULT = null;
		int objleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol tipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression args = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), obj, tipo, args, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(10/*let_expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= LET let_expr 
            {
              Expression RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let le = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = le; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = e; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr LE expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		int nomeTipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int nomeTiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol nomeTipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), nomeTipo); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases list = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, list); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LBRACE expressions RBRACE 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions list = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new block(curr_lineno(), list); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT = null;
		int eWhileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eWhileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression eWhile = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eLoopleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eLoopright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression eLoop = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT =  new loop(curr_lineno(), eWhile, eLoop); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT = null;
		int eIfleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int eIfright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression eIf = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int eThenleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eThenright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression eThen = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eElseleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eElseright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression eElse = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new cond(curr_lineno(), eIf, eThen, eElse); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= OBJECTID argomenti_dispatch 
            {
              Expression RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol nome = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")),nome, args); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DOT OBJECTID argomenti_dispatch 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol nome = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(), e, nome, args); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr AT TYPEID DOT OBJECTID argomenti_dispatch 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol tipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol nome = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new static_dispatch(curr_lineno(), e, tipo, nome, args); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= OBJECTID COLON TYPEID ASSIGN expr 
            {
              Expression RESULT = null;
		int nomeVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int nomeVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol nomeVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tipoVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tipoVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol tipoVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), nomeVariabile, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT = null;
		int nomeVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int nomeVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol nomeVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), nomeVariabile, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argomenti_dispatch_2 ::= argomenti_dispatch_2 COMMA expr 
            {
              Expressions RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = args.appendElement(e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(8/*argomenti_dispatch_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argomenti_dispatch_2 ::= expr 
            {
              Expressions RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(8/*argomenti_dispatch_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argomenti_dispatch ::= LPAREN argomenti_dispatch_2 RPAREN 
            {
              Expressions RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = args; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(7/*argomenti_dispatch*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argomenti_dispatch ::= LPAREN RPAREN 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(7/*argomenti_dispatch*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressions_2 ::= expressions_2 expr SEMI 
            {
              Expressions RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions list = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = list.appendElement(e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(6/*expressions_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressions_2 ::= expr SEMI 
            {
              Expressions RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(6/*expressions_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressions ::= expressions_2 
            {
              Expressions RESULT = null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expressions lista = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = lista; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(5/*expressions*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(5/*expressions*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // single_case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              branch RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol nome = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol tipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new branch(curr_lineno(), nome, tipo, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(16/*single_case*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // case_list ::= case_list single_case 
            {
              Cases RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases l = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		branch sc = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = l.appendElement(sc); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(15/*case_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // case_list ::= single_case 
            {
              Cases RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		branch sc = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(sc); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(15/*case_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT = null;
		int nomeVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int nomeVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol nomeVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int tipoVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tipoVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol tipoVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT =  new formalc(curr_lineno(), nomeVariabile, tipoVariabile); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(14/*formal*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals_2 ::= formals_2 COMMA formal 
            {
              Formals RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(13/*formals_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals_2 ::= formal 
            {
              Formals RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new Formals(curr_lineno()).appendElement(f); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(13/*formals_2*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formals ::= formals_2 
            {
              Formals RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(12/*formals*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formals ::= 
            {
              Formals RESULT = null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(12/*formals*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE error RBRACE SEMI 
            {
              Feature RESULT = null;
		int nomeMetodoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left;
		int nomeMetodoright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).right;
		AbstractSymbol nomeMetodo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tipoRestituitoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tipoRestituitoright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol tipoRestituito = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		 RESULT = null; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(4/*feature*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol nome = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol tipo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(), nome, tipo, new no_expr(curr_lineno())); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(4/*feature*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT = null;
		int nomeVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int nomeVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol nomeVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tipoVariabileleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tipoVariabileright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol tipoVariabile = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(), nomeVariabile, tipoVariabile, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(4/*feature*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		int nomeMetodoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left;
		int nomeMetodoright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).right;
		AbstractSymbol nomeMetodo = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tipoRestituitoleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tipoRestituitoright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol tipoRestituito = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new method(curr_lineno(), nomeMetodo, f, tipoRestituito, e); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(4/*feature*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dummy_feature_list ::= dummy_feature_list error 
            {
              Features RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = fl; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(3/*dummy_feature_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dummy_feature_list ::= dummy_feature_list feature 
            {
              Features RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(3/*dummy_feature_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dummy_feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(3/*dummy_feature_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(2/*class*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(2/*class*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_list ::= error SEMI 
            {
              Classes RESULT = null;
		 RESULT = (new Classes(curr_lineno())); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(1/*class_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list error 
            {
              Classes RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = cl; 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(1/*class_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(1/*class_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(1/*class_list*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		RESULT = start_val;
              CUP$CoolCup$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          /* ACCEPT */
          CUP$CoolCup$parser.done_parsing();
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolCup$result = new java_cup.runtime.Symbol(0/*program*/, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right, RESULT);
            }
          return CUP$CoolCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

